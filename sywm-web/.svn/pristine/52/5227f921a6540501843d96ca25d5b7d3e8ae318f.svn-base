package com.rescam.sywm.web.controller.commodityBase;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.rescam.common.vo.DataTableInfo;
import com.rescam.common.vo.ResultInfo;
import com.rescam.common.web.controller.BaseController;
import com.rescam.common.web.service.BaseService;
import com.rescam.common.web.vo.UserSO;
import com.rescam.sywm.web.service.commodityBase.BrandService;
import com.rescam.sywm.web.vo.ValidInfo;
import com.rescam.sywm.web.util.MessageConst;

@RestController
@Scope("prototype")
@RequestMapping("brands")
public class BrandsController extends BaseController {
	
	@Autowired
	private BrandService brandService;
	
	@ModelAttribute
	public void setUid(HttpSession session) {
		UserSO userSO = (UserSO) session.getAttribute(UserSO.SESSION_KEY);
		if (userSO == null) {
			return;
		}
		Field[] fields = getClass().getDeclaredFields();
		for (Field field : fields) {
			if (BaseService.class.isAssignableFrom(field.getType())) {
				field.setAccessible(true);
				try {
					BaseService baseService = (BaseService) field.get(this);
					baseService.setUid(userSO.getUid());
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	@RequestMapping("add")
	public ResultInfo addBrand(@RequestParam Map<String, String> params){
		
		ResultInfo resultInfo = new ResultInfo();
		ObjectMapper objectMapper = new ObjectMapper();
		
		try {
			String result = brandService.add(params);
			resultInfo = objectMapper.readValue(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("系统错误！");
		}
		return resultInfo;
	
	}
	@RequestMapping("read")
	public ResultInfo readTable(@RequestParam Map<String, String> params){
	
		ResultInfo resultInfo = new ResultInfo();
		ObjectMapper objectMapper = new ObjectMapper();
		
		try {
			String result  = brandService.read(params);
			resultInfo = objectMapper.readValue(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg(MessageConst.OPERATE_FAIL);
		}

		return resultInfo;
	
	}
	@RequestMapping("search")
	public DataTableInfo searchTable(@RequestParam Map<String, String> params) throws Exception{
		DataTableInfo dataTableInfo = new DataTableInfo();

		int draw = Integer.valueOf(params.get("draw"));
		
		int start = Integer.valueOf(params.get("start"));
		
		int length = Integer.valueOf(params.get("length"));
		
		int page = start / length + 1;
		
		params.put("page", String.valueOf(page));
		
		dataTableInfo.setDraw(draw);
		
		Long rows = brandService.count(params);

		List list = brandService.search(params);
		dataTableInfo.setData(list);
		dataTableInfo.setRecordsFiltered(rows);
		dataTableInfo.setRecordsTotal(rows);

		return dataTableInfo;
		
	}
	@RequestMapping("del")
	public ResultInfo delBrands(@RequestParam Map<String, String> params){
		ResultInfo resultInfo = new ResultInfo();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			resultInfo =objectMapper.readValue(brandService.del(params), ResultInfo.class) ;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("系统错误！");
		}
		return resultInfo;
	}
	@RequestMapping("unique")
	public ValidInfo unique(@RequestParam Map<String, String> params){
		ValidInfo info = new ValidInfo();
		ResultInfo resultInfo = new ResultInfo();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			resultInfo = objectMapper.readValue(brandService.unique(params), ResultInfo.class) ;
			if (resultInfo.isSuccess()) {

				info.setStatus("y");
				info.setInfo("");
			} else {

				info.setStatus("n");
				info.setInfo("该分类名称已存在！");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			info.setStatus("n");
			info.setInfo("系统异常，请稍后再试！");
		}
		
		return info;
	}
	@RequestMapping("updata")
	public ResultInfo updata(@RequestParam Map<String, String> params){
		
		ResultInfo resultInfo = new ResultInfo();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			resultInfo = objectMapper.readValue(brandService.updata(params), ResultInfo.class);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			resultInfo.setMsg(MessageConst.OPERATE_FAIL);
		}
		return resultInfo;
	}

}

package com.rescam.sywm.server.controller.commodityBase;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rescam.common.server.util.EntityUtils;
import com.rescam.common.vo.ResultInfo;
import com.rescam.sywm.rs.uri.commodityBase.SYWMCommodityTypeURI;
import com.rescam.sywm.server.entity.CommodityType;
import com.rescam.sywm.server.service.commodityBase.CommodityTypeService;
import com.rescam.sywm.server.vo.ZTreeNode;

@RestController
@RequestMapping(value = SYWMCommodityTypeURI.Base, method = RequestMethod.POST)
public class CommodityTypeController {

	@Autowired
	private CommodityTypeService commodityTypeService;

	@RequestMapping(SYWMCommodityTypeURI.QueryTree)
	public ZTreeNode queryTree() throws Exception {

		return commodityTypeService.queryTree();
	}

	@RequestMapping(SYWMCommodityTypeURI.Read)
	public Map<String, Object> read(@RequestParam Map<String, String> params) throws Exception {

		CommodityType commodityType = commodityTypeService.read(params);

		String filterString = params.get("filterString");

		return EntityUtils.filter(commodityType, filterString);
	}

	@RequestMapping(SYWMCommodityTypeURI.Add)
	public void add(@ModelAttribute CommodityType commodityType) throws Exception {

		if (commodityType.getStorageAreas().getStorageAreasId() == -1) {

			commodityType.setStorageAreas(null);
		}

		commodityTypeService.add(commodityType);
	}

	@RequestMapping(SYWMCommodityTypeURI.Update)
	public void update(@RequestParam Map<String, String> params) throws Exception {

		if ("-1".equals(params.get("storageAreas.storageAreasId"))) {

			params.put("storageAreas.storageAreasId", null);
		}

		commodityTypeService.update(params);
	}

	@RequestMapping(SYWMCommodityTypeURI.Delete)
	public void delete(@RequestParam Map<String, String> params) throws Exception {

		commodityTypeService.delete(params);
	}

	@RequestMapping(SYWMCommodityTypeURI.UniqueCommodityTypeName)
	public ResultInfo uniqueCommodityTypeName(@RequestParam Map<String, String> params) throws Exception {

		return commodityTypeService.uniqueCommodityTypeName(params);
	}

	@RequestMapping(SYWMCommodityTypeURI.UniqueCommodityTypeCode)
	public ResultInfo uniqueCommodityTypeCode(@RequestParam Map<String, String> params) throws Exception {

		return commodityTypeService.uniqueCommodityTypeCode(params);
	}
}

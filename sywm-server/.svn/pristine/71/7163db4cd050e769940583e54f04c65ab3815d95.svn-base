package com.rescam.sywm.server.controller.system;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.hibernate.annotations.Source;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rescam.common.server.util.EntityUtils;
import com.rescam.common.vo.ResultInfo;
import com.rescam.sywm.rs.uri.system.SYWMUserGroupURI;
import com.rescam.sywm.server.entity.UserGroup;
import com.rescam.sywm.server.service.system.UserGroupService;
@RestController
@RequestMapping(value=SYWMUserGroupURI.Base,method=RequestMethod.POST)
public class UserGroupController {
	@Resource
	UserGroupService userGroupService;
	@RequestMapping(value=SYWMUserGroupURI.Add)
	public void add(@ModelAttribute UserGroup userGroup)throws Exception{
		userGroupService.add(userGroup);
	}
	@RequestMapping(value=SYWMUserGroupURI.Search)
	public List<Map<String, Object>> search(@RequestParam Map<String, String> params)throws Exception{
		List<UserGroup> list=userGroupService.search(params);
		String filterString = params.get("filterString");
		return EntityUtils.filter(list, filterString);
		
	}
	@RequestMapping(value=SYWMUserGroupURI.Count)
	public Long count(@RequestParam Map<String, String> params) throws Exception{
		Long count=userGroupService.count(params);
		return count;
		
	}
	@RequestMapping(value=SYWMUserGroupURI.Del)
	@Transactional
	public void del(@RequestParam Map<String, String> params){
		userGroupService.del(params);
	}
	@RequestMapping(value=SYWMUserGroupURI.Read)
	public Map<String, Object> read(@RequestParam Map<String, String> params) throws Exception{
		UserGroup userGroup=userGroupService.read(params);
		String filterString = params.get("filterString");
		return EntityUtils.filter(userGroup, filterString);
		
	}
	@RequestMapping(value=SYWMUserGroupURI.Update)
	@Transactional
	public void update(@ModelAttribute UserGroup userGroup)throws Exception{
		userGroupService.update(userGroup);
	}
	@RequestMapping(value=SYWMUserGroupURI.UniqueUserGroupName)
	public ResultInfo uniqueuserGroupName(@RequestParam Map<String, String> params)throws Exception{
		ResultInfo resultInfo=new ResultInfo();
		List<UserGroup> list=userGroupService.uniqueuserGroupName(params);
		if (list.size()>0) {
			resultInfo.setSuccess(false);
		}else{
			resultInfo.setSuccess(true);
		}
		return resultInfo;
		
	}
}

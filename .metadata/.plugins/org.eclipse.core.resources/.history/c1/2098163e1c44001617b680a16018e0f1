package com.rescam.sywm.server.service.commodityBase.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.rescam.common.server.dao.BaseDAO;
import com.rescam.common.server.util.EntityUtils;
import com.rescam.sywm.server.entity.Brands;
import com.rescam.sywm.server.entity.CommodityPacking;
import com.rescam.sywm.server.service.commodityBase.CommodityPackingService;

@Transactional
@Service()
public class CommodityPackingServiceImpl implements CommodityPackingService {
	@Resource
	BaseDAO<CommodityPacking> dao;
	@Resource
	BaseDAO<Brands> daoBrands;

	@Override
	public Long getCount(Map<String, String> params) throws Exception {
		String hql = "select count(1) from CommodityPacking where isDelete = 0 ";
		String searchKey = params.get("searchKey");
		if (searchKey != null & searchKey != "") {
			hql += "and (commodityName like '%" + searchKey
					+ "%' or commodityBarcode like '%" + searchKey + "%') ";
		}
		/* hql += " order by commodityPackingId desc "; */
		return dao.count(hql);
	}

	@Override
	public List<CommodityPacking> search(Map<String, String> params)
			throws Exception {
		String hql = "from CommodityPacking  where isDelete = 0 ";
		String searchKey = params.get("searchKey");
		int page = Integer.valueOf((params.get("page")));
		int rows = Integer.valueOf((params.get("length")));
		if (searchKey != null & searchKey != "") {
			hql += "and (commodityName like '%" + searchKey
					+ "%' or commodityBarcode like '%" + searchKey + "%') ";
		}

		/* hql += " order by commodityPackingId desc "; */
		return dao.find(hql, new Object[0], page, rows);
	}

	@Override
	public CommodityPacking read(Map<String, String> params) throws Exception {

		return dao.get(CommodityPacking.class,
				Integer.valueOf(params.get("commodityPackingId")));

	}

	@Override
	public void delete(String id) {

		CommodityPacking CommodityPacking = dao.get(CommodityPacking.class,
				Integer.valueOf(id));

		CommodityPacking.setIsDelete(true);

		dao.update(CommodityPacking);
	}

	@Override
	public Serializable add(CommodityPacking commodityPacking) {

		Serializable serializable = dao.save(commodityPacking);

		return serializable;

	}

	@Override
	@Transactional
	public Boolean update(Map<String, Object> params) throws Exception {

		Boolean result = false;
		CommodityPacking commodityPacking = dao.get(CommodityPacking.class,
				Integer.valueOf(params.get("commodityPackingId").toString()));

		EntityUtils.populate(commodityPacking, params);

		dao.update(commodityPacking);
		result = true;
		return result;
	}

	@Override
	public Boolean unique(Map<String, String> params) throws Exception {
		Boolean flg = true;
		String param = params.get("param");
		String hql = "from CommodityPacking ";
		List<CommodityPacking> list = dao.find(hql);
		for (int i = 0; i < list.size(); i++) {
			CommodityPacking commodityPacking = list.get(i);
			if (commodityPacking.getCommodityBarcode().equals(param)) {
				flg = false;
				break;
			}
		}
		return flg;
	}
}

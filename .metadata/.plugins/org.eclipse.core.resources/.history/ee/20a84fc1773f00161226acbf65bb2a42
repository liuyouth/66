package com.rescam.syhz.web.controller.goodsOwner;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.context.annotation.Scope;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.rescam.common.vo.DataTableInfo;
import com.rescam.common.vo.ResultInfo;
import com.rescam.common.web.controller.BaseController;
import com.rescam.common.web.service.BaseService;
import com.rescam.syhz.web.service.goodsOwner.RecipientService;
import com.rescam.syhz.web.vo.ValidInfo;

@RestController
@RequestMapping("/recipient")
@Scope("prototype")
public class RecipientController extends BaseController {
	@Resource
	public RecipientService service;


	/**
	 * 按条件查询数据列表
	 * 
	 * @param params
	 *            map{searchCode:入库编号 , searchDate:入库时间 , warehouseId:仓库ID }
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search")
	public DataTableInfo search(@RequestParam Map<String, String> params,
			HttpServletRequest request) throws Exception {
		DataTableInfo dataTableInfo = new DataTableInfo();

		int draw = Integer.valueOf(params.get("draw"));
		// 当前第几页，datatables从0开始算第一页
		int start = Integer.valueOf(params.get("start"));
		// 每页显示的数据量
		int length = Integer.valueOf(params.get("length"));
		// 转换为page
		int page = start / length + 1;
		// 模糊查询
		params.put("page", String.valueOf(page));
		// 保存返回数据
		dataTableInfo.setDraw(draw);
		// 数据量
		Long rows = service.count(params);
		if (rows == null || rows == 0) {
			dataTableInfo.setRecordsFiltered(0);
			dataTableInfo.setRecordsTotal(0);
			dataTableInfo.setData(new ArrayList<Object>());
			return dataTableInfo;
		}
		// 数据
		List list = service.search(params);
		dataTableInfo.setData(list);
		dataTableInfo.setRecordsFiltered(rows);
		dataTableInfo.setRecordsTotal(rows);

		return dataTableInfo;

	}

	/**
	 * 读取单条数据
	 * 
	 * @param params
	 *            限制条件 ID
	 * @return 数据信息 / 系统错误！
	 */
	@RequestMapping("/read")
	public ResultInfo read(@RequestParam Map<String, String> params) {
		ResultInfo resultInfo = new ResultInfo();
		try {
			ObjectMapper objectMapper = new ObjectMapper();
			String result = service.read(params);
			resultInfo = objectMapper.readValue(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("系统错误！");
		}
		return resultInfo;
	}

	@RequestMapping("/add")
	public ResultInfo add(@RequestBody Map<String, String> params, HttpServletRequest request) {
		ResultInfo resultInfo = new ResultInfo();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			String result = service.add(params);
			resultInfo = objectMapper.readValue(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("系统错误！");
		}
		return resultInfo;

	}
	
	@RequestMapping("/update")
	public ResultInfo update(@RequestBody Map<String, String> params, HttpServletRequest request) {
		ResultInfo resultInfo = new ResultInfo();
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			String result = service.update(params);
			resultInfo = objectMapper.readValue(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("系统错误！");
		}
		return resultInfo;
		
	}
	// 校验Name唯一性
	@RequestMapping("/unique") 
	public ValidInfo unique(@RequestParam Map<String, String> params){
		ValidInfo info =new ValidInfo();
		ResultInfo resultInfo =new ResultInfo();
		try {
			String result =service.unique(params);
			ObjectMapper objectMapper = new ObjectMapper();
			resultInfo = objectMapper.readValue(result, ResultInfo.class);
			if (resultInfo.getMsg()==null) {
				
			}else {
				
				info = objectMapper.readValue(resultInfo.getMsg().toString(), ValidInfo.class);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return info;
	}
	
	// 批量删除
		@RequestMapping("/delete")
		public ResultInfo dels(@RequestParam Map<String, String> param) {
			ResultInfo resultInfo;
			try {
				ObjectMapper objectMapper = new ObjectMapper();
				String result = service.delete(param);
				resultInfo = objectMapper.readValue(result, ResultInfo.class);
			} catch (Exception e) {
				e.printStackTrace();
				resultInfo = new ResultInfo();
				resultInfo.setMsg("系统错误!");
			}
			
			return resultInfo;
		}

}

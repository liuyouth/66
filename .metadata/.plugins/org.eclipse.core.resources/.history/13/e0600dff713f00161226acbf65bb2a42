package com.rescam.syhz.web.controller.goodsOwner;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rescam.common.vo.DataTableInfo;
import com.rescam.common.vo.ResultInfo;
import com.rescam.common.web.controller.BaseController;
import com.rescam.syhz.web.service.goodsOwner.RecipientService;

@RestController
@RequestMapping("/recipient")
@Scope("prototype")
public class RecipientController extends BaseController {

	@Autowired
	private RecipientService service;


	/**
	 * 鎸夋潯浠舵煡璇㈡暟鎹垪琛�
	 * 
	 * @param params
	 *            map{searchCode:鍏ュ簱缂栧彿 , searchDate:鍏ュ簱鏃堕棿 , warehouseId:浠撳簱ID
	 *            }
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search")
	public DataTableInfo search(@RequestParam Map<String, String> params,
			HttpServletRequest request) throws Exception {
		DataTableInfo dataTableInfo = new DataTableInfo();

		int draw = Integer.valueOf(params.get("draw"));
		// 褰撳墠绗嚑椤碉紝datatables浠�0寮�濮嬬畻绗竴椤�
		int start = Integer.valueOf(params.get("start"));
		// 姣忛〉鏄剧ず鐨勬暟鎹噺
		int length = Integer.valueOf(params.get("length"));
		// 杞崲涓簆age
		int page = start / length + 1;
		// 妯＄硦鏌ヨ
		params.put("page", String.valueOf(page));
		// 淇濆瓨杩斿洖鏁版嵁
		dataTableInfo.setDraw(draw);
		// 鏁版嵁閲�
		Long rows = service.count(params);
		if (rows == null || rows == 0) {
			dataTableInfo.setRecordsFiltered(0);
			dataTableInfo.setRecordsTotal(0);
			dataTableInfo.setData(new ArrayList<Object>());
			return dataTableInfo;
		}
		// 鏁版嵁
		List list = service.search(params);
		dataTableInfo.setData(list);
		dataTableInfo.setRecordsFiltered(rows);
		dataTableInfo.setRecordsTotal(rows);

		return dataTableInfo;

	}

	/**
	 * 璇诲彇鍗曟潯鏁版嵁
	 * 
	 * @param params
	 *            闄愬埗鏉′欢 ID
	 * @return 鏁版嵁淇℃伅 / 绯荤粺閿欒锛�
	 */
	@RequestMapping("/read")
	public ResultInfo read(@RequestParam Map<String, String> params) {
		ResultInfo resultInfo = new ResultInfo();
		try {
			Gson gson = new Gson();
			String result = service.read(params);
			resultInfo = gson.fromJson(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("绯荤粺閿欒锛�");
		}
		return resultInfo;
	}

	@RequestMapping("/add")
	public ResultInfo add(@RequestBody Map<String, String> params,
			HttpServletRequest request) {
		ResultInfo resultInfo = new ResultInfo();
		Gson gson = new Gson();
		try {
			String result = service.add(params);
			resultInfo = gson.fromJson(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("绯荤粺閿欒锛�");
		}
		return resultInfo;

	}

	@RequestMapping("/update")
	public ResultInfo update(@RequestBody Map<String, String> params,
			HttpServletRequest request) {
		ResultInfo resultInfo = new ResultInfo();
		Gson gson = new Gson();
		try {
			String result = service.update(params);
			resultInfo = gson.fromJson(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("绯荤粺閿欒锛�");
		}
		return resultInfo;

	}

	// 鏍￠獙Name鍞竴鎬�
	@RequestMapping("/unique")
	public ResultInfo unique(@RequestParam Map<String, String> params) {
		ResultInfo info = new ResultInfo();
		try {
			String result = service.unique(params);
			Gson gson = new Gson();
			info = gson.fromJson(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return info;
	}

	// 鎵归噺鍒犻櫎
	@RequestMapping("/delete")
	public ResultInfo dels(@RequestParam Map<String, String> param) {
		ResultInfo resultInfo;
		try {
			Gson gson = new Gson();
			String result = service.delete(param);
			resultInfo = gson.fromJson(result, ResultInfo.class);
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo = new ResultInfo();
			resultInfo.setMsg("绯荤粺閿欒!");
		}

		return resultInfo;
	}

}
